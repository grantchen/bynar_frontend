{"version":3,"file":"static/js/630.b16ae4aa.chunk.js","mappings":"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","sources":["components/Login/index.js","components/MagicLInkValidation/index.js","pages/signin/index.js"],"sourcesContent":["import \"../../pages/signin/signin.scss\";\nimport {\n  Form,\n  Button,\n  Heading,\n  Checkbox,\n  FormLabel,\n  ToastNotification,\n  TextInput,\n  InlineLoading,\n  Link,\n} from \"@carbon/react\";\nimport { ArrowRight, ArrowLeft } from \"@carbon/react/icons\";\nimport { useNavigate } from \"react-router-dom\";\nconst Login = ({\n  heading,\n  loading,\n  handleFormSubmit,\n  setErrorNotification,\n  setServerErrorNotification,\n  serverErrorNotification,\n  errorNotification,\n  showCreateAccount,\n  createAccoutText,\n  navigationUrl,\n  navigationUrlText,\n  labelText,\n  labelValue,\n  setFormLabelState,\n  buttonText,\n  enableForgotPassword,\n  placeholderText,\n  showRememberId = false,\n  navigateToLogin = false,\n  text,\n  subtitle,\n  setSignInPhaseOne,\n}) => {\n  const navigate = useNavigate();\n  return (\n    <div className=\"signin-container\">\n      <div className=\"box-container\">\n        <Form onSubmit={handleFormSubmit}>\n          <div style={{ paddingRight: \"20px\" }}>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n              }}\n            >\n              <Heading style={{ fontSize: \"28px\", fontWeight: \"400\" }}>\n                {heading}\n              </Heading>\n            </div>\n            {navigateToLogin && (\n              <p className=\"register-text-body-01\">\n                {text}\n                <Link\n                  className=\"underlined-link\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    setSignInPhaseOne(true);\n                  }}\n                >\n                  {\" \"}\n                  {subtitle}\n                </Link>\n              </p>\n            )}\n            {/* {showCreateAccount && <p className=\"register-text-body-01\">{createAccoutText}<Link style={{ cursor: 'pointer' }} className=\"underlined-link\" onClick={() => { navigate(`${navigationUrl}`) }}> {navigationUrlText}</Link></p>} */}\n            {typeof serverErrorNotification === \"object\" &&\n            Object.keys(serverErrorNotification).length !== 0 ? (\n              <ToastNotification\n                className=\"error-notification-box\"\n                onClose={function noRefCheck() {}}\n                onCloseButtonClick={() => {\n                  setErrorNotification({});\n                  setServerErrorNotification({});\n                }}\n                statusIconDescription=\"notification\"\n                title={\n                  serverErrorNotification.title\n                    ? serverErrorNotification.title\n                    : \"\"\n                }\n              />\n            ) : (\n              <div></div>\n            )}\n            <div className=\"login-input-wrapper\">\n              {enableForgotPassword ? (\n                <FormLabel className=\"input-label\">\n                  {labelText}{\" \"}\n                  <Link\n                    style={{ cursor: \"pointer\" }}\n                    className=\"forgot-link\"\n                    onClick={() => {\n                      navigate(\"/forgotpassword\");\n                    }}\n                  >\n                    Forgot Password?\n                  </Link>\n                </FormLabel>\n              ) : (\n                <FormLabel className=\"input-label\">{labelText} </FormLabel>\n              )}\n              <TextInput\n                id=\"email\"\n                className=\"login-form-input\"\n                hideLabel={true}\n                invalid={\n                  typeof errorNotification === \"object\" &&\n                  Object.keys(errorNotification).length !== 0\n                }\n                labelText=\"\"\n                invalidText={\n                  errorNotification && errorNotification.title\n                    ? errorNotification.title\n                    : \"\"\n                }\n                placeholder={placeholderText}\n                disabled={loading ? true : false}\n                value={labelValue}\n                onChange={(e) => {\n                  setFormLabelState(e.target.value);\n                  if (\n                    typeof errorNotification === \"object\" &&\n                    Object.keys(errorNotification).length !== 0\n                  )\n                    setErrorNotification({});\n                  setServerErrorNotification({});\n                }}\n              />\n            </div>\n            {showRememberId && (\n              <Checkbox\n                className=\"checkbox-item\"\n                labelText={`Remember ID`}\n                id=\"checkbox-label-1\"\n              />\n            )}\n          </div>\n          <div className=\"fields-container\">\n            {loading ? (\n              <div className=\"loader-signin\">\n                <InlineLoading\n                  description={\"Please wait...\"}\n                  className=\"submit-button-loading\"\n                />\n              </div>\n            ) : (\n              <Button\n                renderIcon={ArrowRight}\n                type=\"submit\"\n                iconDescription={\"\"}\n              >\n                {buttonText}\n              </Button>\n            )}\n          </div>\n          <div className=\"footer-container\">\n            {showCreateAccount && (\n              <p className=\"register-text-body-01\">\n                {createAccoutText}\n                <Link\n                  style={{\n                    cursor: \"pointer\",\n                    textDecoration: \"underline\",\n                    paddingLeft: \"4px\",\n                    outline: \"none\",\n                  }}\n                  className=\"underlined-link\"\n                  href={`${navigationUrl}`}\n                >\n                  {\" \"}\n                  {navigationUrlText}\n                </Link>\n              </p>\n            )}\n          </div>\n        </Form>\n      </div>\n      <div className=\"footer-text\">\n        <p className=\"register-text-body-02\">\n          {\"Need help?\"}\n          <Link\n            style={{\n              cursor: \"pointer\",\n              textDecoration: \"underline\",\n              paddingLeft: \"4px\",\n              outline: \"none\",\n            }}\n            href={`signin`}\n          >\n            {\" \"}\n            {\"Contact the Bynar help desk\"}\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default Login;\n","import \"../../pages/signin/signin.scss\";\nimport {\n  Form,\n  Button,\n  Heading,\n  FormLabel,\n  TextInput,\n  InlineLoading,\n  ToastNotification,\n  Link,\n} from \"@carbon/react\";\nimport { ArrowRight, ArrowLeft } from \"@carbon/react/icons\";\nimport { useNavigate } from \"react-router-dom\";\nconst MagicLinkValidation = ({\n  heading,\n  loading,\n  loadingSucess,\n  handleFormSubmit,\n  errorNotification,\n  labelText,\n  labelValue,\n  setFormLabelState,\n  buttonText,\n  text,\n  subtitle,\n  setSignInPhaseOne,\n  showCreateAccount,\n  createAccoutText,\n  navigationUrl,\n  navigationUrlText,\n  placeholderText,\n  setErrorNotification,\n  setServerErrorNotification,\n  serverErrorNotification,\n  handleEmailFormSubmit,\n}) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      <div className=\"signin-container\">\n        <div className=\"box-container\">\n          <Form onSubmit={handleFormSubmit}>\n            <div style={{ paddingRight: \"20px\" }}>\n              <Heading style={{ fontSize: \"28px\", fontWeight: \"400\" }}>\n                {heading}\n              </Heading>\n              <p className=\"register-text body-01\">\n                {text}\n                <Link\n                  className=\"underlined-link\"\n                  style={{\n                    cursor: \"pointer\",\n                    paddingLeft: \"4px\",\n                    textDecoration: \"underline\",\n                  }}\n                  onClick={() => {\n                    setSignInPhaseOne(true);\n                    setServerErrorNotification({});\n                  }}\n                >\n                  {\" \"}\n                  {subtitle}\n                </Link>\n              </p>\n              {typeof serverErrorNotification === \"object\" &&\n              Object.keys(serverErrorNotification).length !== 0 ? (\n                <div className=\"notification-container\">\n                  <ToastNotification\n                    className=\"error-notification-box\"\n                    timeout={0}\n                    title={serverErrorNotification?.title}\n                    kind={serverErrorNotification?.status}\n                    onCloseButtonClick={() => {\n                      setErrorNotification({});\n                      setServerErrorNotification({});\n                    }}\n                  />\n                </div>\n              ) : (\n                <div></div>\n              )}\n              <div className=\"login-input-wrapper\">\n                <FormLabel className=\"input-label\">{labelText}</FormLabel>\n                <TextInput\n                  id=\"security-code\"\n                  className=\"login-form-input\"\n                  hideLabel={true}\n                  invalid={\n                    typeof errorNotification === \"object\" &&\n                    Object.keys(errorNotification).length !== 0\n                  }\n                  labelText=\"\"\n                  invalidText={\n                    errorNotification && errorNotification.title\n                      ? errorNotification.title\n                      : \"\"\n                  }\n                  placeholder={placeholderText}\n                  disabled={loading ? true : false}\n                  value={labelValue}\n                  onChange={(e) => {\n                    setFormLabelState(e.target.value);\n                    if (\n                      typeof errorNotification === \"object\" &&\n                      Object.keys(errorNotification).length !== 0\n                    )\n                      setErrorNotification({});\n                    setServerErrorNotification({});\n                  }}\n                />\n                <div className=\"resend-code\">\n                  {loadingSucess ? (\n                    <div>\n                      <InlineLoading\n                        description={\"resending security code...\"}\n                        className=\"submit-button-loading\"\n                      />\n                    </div>\n                  ) : (\n                    <p\n                      className=\"resend-code-text\"\n                      onClick={handleEmailFormSubmit}\n                    >\n                      Resend security code\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"fields-container\">\n              {loading ? (\n                <div className=\"loader-signin\">\n                  <InlineLoading\n                    description={\"Please wait...\"}\n                    className=\"submit-button-loading\"\n                  />\n                </div>\n              ) : (\n                <Button\n                  renderIcon={ArrowRight}\n                  type=\"submit\"\n                  iconDescription={\"\"}\n                >\n                  {buttonText}\n                </Button>\n              )}\n            </div>\n            <div className=\"footer-container\">\n              {showCreateAccount && (\n                <p className=\"register-text-body-01\">\n                  {createAccoutText}\n                  <Link\n                    style={{\n                      cursor: \"pointer\",\n                      textDecoration: \"underline\",\n                      paddingLeft: \"4px\",\n                      outline: \"none\",\n                    }}\n                    className=\"underlined-link\"\n                    href={`${navigationUrl}`}\n                  >\n                    {\" \"}\n                    {navigationUrlText}\n                  </Link>\n                </p>\n              )}\n            </div>\n          </Form>\n        </div>\n        <div className=\"footer-text\">\n          <p className=\"register-text-body-01\">\n            {\"Need help?\"}\n            <Link\n              style={{\n                cursor: \"pointer\",\n                textDecoration: \"underline\",\n                paddingLeft: \"4px\",\n                outline: \"none\",\n              }}\n              className=\"underlined-link\"\n              href={`signin`}\n            >\n              {\" \"}\n              {\"Contact the Bynar help desk\"}\n            </Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default MagicLinkValidation;\n","import React, { useState, useRef, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./signin.scss\";\nimport { AuthContext } from \"../../sdk\";\nimport { Auth } from \"aws-amplify\";\nimport Login from \"../../components/Login\";\nimport MagicLinkValidation from \"../../components/MagicLInkValidation\";\n\nconst Signin = () => {\n    const navigate = useNavigate();\n    const authContext = useContext(AuthContext);\n    const [signInPhaseOne, setSignInPhaseOne] = useState(true); // state to store signInPhase ,initially set to true to show initial login component\n    const [loading, setLoading] = useState(false);\n    const [errorNotification, setErrorNotification] = useState({});\n    const [serverErrorNotification, setServerErrorNotification] = useState({});\n    const [email, setEmail] = useState(\"\");\n    const [verificationCode, setVerificationCode] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [isPasswordLessSignin, setPasswordLessSignin] = useState(true);\n    const cognitoUser = useRef(null);\n    const [loadingSucess, setLoadingSucess] = useState(false);\n\n    /** function to validate email address. */\n    const validateEmail = (email) => {\n        return String(email.trim())\n            .toLowerCase()\n            .match(\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            );\n    };\n\n    /** Function to handle email submit and if email validation sucessfull then move to next part of signin flow. */\n    const handleEmailFormSubmit = async (e) => {\n        e.preventDefault();\n        if (email.length === 0) {\n            setErrorNotification({\n                title: \"Email should not be blank\",\n            });\n        } else if (!validateEmail(email)) {\n            setErrorNotification({\n                title: \"Enter valid email\",\n            });\n        } else {\n            setErrorNotification({});\n            setServerErrorNotification({});\n            setLoadingSucess(true);\n            try {\n                cognitoUser.current = await Auth.signIn({\n                    username: email.trim(),\n                });\n                setSignInPhaseOne(false);\n                setLoadingSucess(false);\n                setVerificationCode(\"\");\n                if (!signInPhaseOne)\n                    setServerErrorNotification({\n                        title: `security code sent to ${email}`,\n                        status: \"success\",\n                    });\n            } catch (e) {\n                console.log(e);\n                setLoadingSucess(false);\n                setVerificationCode(\"\");\n                setServerErrorNotification({\n                    title: \"Email address not verified\",\n                    status: \"error\",\n                });\n            }\n        }\n    };\n\n    /** Function to perform action in case of sigin using password ,if any validation process failed then show error , otherwise enable user to sign in */\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        setLoading(true);\n        if (password.length === 0) {\n            setErrorNotification({\n                title: \"Password should not be blank\",\n            });\n            setLoading(false);\n        } else {\n            setErrorNotification({});\n            const fetchData = async () => {\n                try {\n                    const data = {\n                        email: email,\n                        password: password,\n                    };\n                    const response = await authContext.signin(data, false);\n\n                    if (response?.error) {\n                        setServerErrorNotification({\n                            title: \"Wrong email or password\",\n                        });\n\n                        setSignInPhaseOne(true);\n                    }\n                    setLoading(false);\n                } catch (e) {\n                    console.log(\"error\");\n                    setLoading(false);\n                }\n            };\n            fetchData();\n        }\n    };\n\n    /** Function to perform action in case of sigin using magic link ,if any validation process failed then show error , otherwise enable user to sign in  */\n    const verifyMagicLink = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setServerErrorNotification({});\n        if (verificationCode.trim().length === 0) {\n            setErrorNotification({\n                title: \"Security code should not be blank\",\n            });\n            setLoading(false);\n            setVerificationCode(\"\");\n        } else {\n            try {\n                await Auth.sendCustomChallengeAnswer(\n                    cognitoUser.current,\n                    verificationCode\n                );\n                await authContext.refreshPostSignIn();\n\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n                if (\n                    err ===\n                    \"NotAuthorizedException: Invalid session for the user.\"\n                ) {\n                    setServerErrorNotification({\n                        title: \"Maximum attempts reached , please login using new code\",\n                        status: \"error\",\n                    });\n                } else\n                    setServerErrorNotification({\n                        title: \"Enter correct security code\",\n                        status: \"error\",\n                    });\n                // setSignInPhaseOne(true)\n                setLoading(false);\n                setVerificationCode(\"\");\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (signInPhaseOne) {\n            setErrorNotification({});\n            setVerificationCode(\"\");\n        }\n    }, [signInPhaseOne]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                {signInPhaseOne ? (\n                    <Login\n                        heading={\"Log in to Bynar\"}\n                        loading={loadingSucess}\n                        handleFormSubmit={handleEmailFormSubmit}\n                        setErrorNotification={setErrorNotification}\n                        setServerErrorNotification={setServerErrorNotification}\n                        serverErrorNotification={serverErrorNotification}\n                        errorNotification={errorNotification}\n                        showCreateAccount={true}\n                        createAccoutText={\"Don't have an account?\"}\n                        navigationUrl={\"/signup\"}\n                        navigationUrlText={\"Create an Bynar account\"}\n                        labelText={\"E-mail\"}\n                        labelValue={email}\n                        setFormLabelState={setEmail}\n                        buttonText={\"Continue\"}\n                        enableForgotPassword={false}\n                        placeholderText={\" \"}\n                        showRememberId={false}\n                        text={`Logging in as ${email}`}\n                        subtitle={\"Not you?\"}\n                        setSignInPhaseOne={setSignInPhaseOne}\n                    />\n                ) : isPasswordLessSignin ? (\n                    /* isPaswordLessSignin if true then sign in using magic link based on otp validation */\n                    <MagicLinkValidation\n                        heading={\"Log in to Bynar\"}\n                        loading={loading}\n                        loadingSucess={loadingSucess}\n                        handleFormSubmit={verifyMagicLink}\n                        errorNotification={errorNotification}\n                        labelText={\"Security code\"}\n                        labelValue={verificationCode}\n                        setFormLabelState={setVerificationCode}\n                        buttonText={\"Login\"}\n                        text={`Logging in as ${email}`}\n                        subtitle={\"Not you?\"}\n                        setSignInPhaseOne={setSignInPhaseOne}\n                        showCreateAccount={true}\n                        createAccoutText={\"Don't have an account?\"}\n                        navigationUrl={\"/signup\"}\n                        navigationUrlText={\"Create an Bynar account\"}\n                        placeholderText={\"\"}\n                        setErrorNotification={setErrorNotification}\n                        setServerErrorNotification={setServerErrorNotification}\n                        serverErrorNotification={serverErrorNotification}\n                        handleEmailFormSubmit={handleEmailFormSubmit}\n                    />\n                ) : (\n                    /* isPaswordLessSignin if false then sign in using password */\n                    <Login\n                        heading={\"Login\"}\n                        loading={loading}\n                        handleFormSubmit={handleFormSubmit}\n                        setErrorNotification={setErrorNotification}\n                        setServerErrorNotification={setServerErrorNotification}\n                        serverErrorNotification={serverErrorNotification}\n                        errorNotification={errorNotification}\n                        showCreateAccount={false}\n                        createAccoutText={\"\"}\n                        navigationUrl={\"/signup\"}\n                        navigationUrlText={\"\"}\n                        labelText={\"Password\"}\n                        labelValue={password}\n                        setFormLabelState={setPassword}\n                        buttonText={\"Login\"}\n                        enableForgotPassword={false}\n                        placeholderText={\"Password\"}\n                        navigateToLogin={true}\n                        text={`Logging in as ${email}`}\n                        subtitle={\"Not you?\"}\n                        setSignInPhaseOne={setSignInPhaseOne}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Signin;\n"],"names":["_ref","heading","loading","handleFormSubmit","setErrorNotification","setServerErrorNotification","serverErrorNotification","errorNotification","showCreateAccount","createAccoutText","navigationUrl","navigationUrlText","labelText","labelValue","setFormLabelState","buttonText","enableForgotPassword","placeholderText","_ref$showRememberId","showRememberId","_ref$navigateToLogin","navigateToLogin","text","subtitle","setSignInPhaseOne","navigate","useNavigate","_jsxs","className","children","_jsx","Form","onSubmit","style","paddingRight","display","justifyContent","alignItems","Heading","fontSize","fontWeight","Link","cursor","onClick","Object","keys","length","ToastNotification","onClose","onCloseButtonClick","statusIconDescription","title","FormLabel","TextInput","id","hideLabel","invalid","invalidText","placeholder","disabled","value","onChange","e","target","Checkbox","InlineLoading","description","Button","renderIcon","ArrowRight","type","iconDescription","textDecoration","paddingLeft","outline","href","concat","loadingSucess","handleEmailFormSubmit","_Fragment","timeout","kind","status","authContext","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","signInPhaseOne","_useState3","_useState4","setLoading","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","email","setEmail","_useState11","_useState12","verificationCode","setVerificationCode","_useState13","_useState14","password","setPassword","_useState15","_useState16","isPasswordLessSignin","cognitoUser","useRef","_useState17","_useState18","setLoadingSucess","validateEmail","String","trim","toLowerCase","match","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","preventDefault","Auth","username","current","sent","t0","console","log","stop","_x","apply","arguments","verifyMagicLink","_ref3","_callee3","_context3","refreshPostSignIn","_x2","useEffect","flexDirection","Login","MagicLinkValidation","fetchData","_ref2","_callee2","data","response","_context2","signin","error"],"sourceRoot":""}